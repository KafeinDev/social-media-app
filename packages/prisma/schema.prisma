generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(cuid())
  username    String @unique
  displayname String
  email       String @unique

  password Password?
  tokens   Token[]

  posts Post[]
  likes Like[]

  inviters Friend[] @relation(name: "inviters")
  invitees Friend[] @relation(name: "invitees")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Friend {
  id Int @id @default(autoincrement())

  inviter   User   @relation(name: "inviters", fields: [inviterId], references: [id])
  inviterId String

  invitee   User   @relation(name: "invitees", fields: [inviteeId], references: [id])
  inviteeId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([inviteeId])
  @@index([inviterId])
}

model Post {
  id String @id @default(cuid())

  rootPostId   String?
  parentPostId String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  content        String
  attachmentUrls String[]

  viewCount    Int @default(0)
  likeCount    Int @default(0)
  commentCount Int @default(0)
  repostCount  Int @default(0)

  isRepost Boolean @default(false)
  isReply  Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Like {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
}

model Token {
  id         Int       @id @default(autoincrement())
  type       TokenType
  value      String
  valid      Boolean   @default(true)
  expiration DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum TokenType {
  ACCESS
  REFRESH
  VERIFY_EMAIL
  RESET_PASSWORD
}
